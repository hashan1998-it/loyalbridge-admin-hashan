{
	"info": {
		"_postman_id": "12345678-1234-1234-1234-123456789012",
		"name": "LoyalBridge Admin Panel",
		"description": "Complete API testing collection for LoyalBridge loyalty management system admin panel.\n\nFeatures:\n- JWT Authentication with multiple admin roles\n- User management with advanced search and filtering\n- Role-based access control testing\n- Sample data validation\n- Error handling verification\n\nDefault Test Accounts:\n- admin@loyalbridge.io / AdminPassword123! (SUPER_ADMIN)\n- finance@loyalbridge.io / FinancePassword123! (FINANCE_TEAM)\n- support@loyalbridge.io / SupportPassword123! (SUPPORT_STAFF)\n- partner@loyalbridge.io / PartnerPassword123! (PARTNER_ADMIN)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "üîê Authentication",
			"item": [
				{
					"name": "Admin Login (Super Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.success).to.be.true;",
									"    ",
									"    // Save tokens for other requests",
									"    if (responseJson.data.accessToken) {",
									"        pm.collectionVariables.set(\"access_token\", responseJson.data.accessToken);",
									"        console.log(\"Access token saved:\", responseJson.data.accessToken.substring(0, 20) + \"...\");",
									"    }",
									"    if (responseJson.data.refreshToken) {",
									"        pm.collectionVariables.set(\"refresh_token\", responseJson.data.refreshToken);",
									"    }",
									"});",
									"",
									"pm.test(\"Response contains admin info\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data.admin).to.have.property(\"email\");",
									"    pm.expect(responseJson.data.admin).to.have.property(\"role\");",
									"    pm.expect(responseJson.data.admin.role).to.eql(\"SUPER_ADMIN\");",
									"});",
									"",
									"pm.test(\"Token format is valid\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data.accessToken).to.match(/^[A-Za-z0-9\\-_]+\\.[A-Za-z0-9\\-_]+\\.[A-Za-z0-9\\-_]+$/);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"admin@loyalbridge.io\",\n  \"password\": \"AdminPassword123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Login as Super Admin with full system access"
					}
				},
				{
					"name": "Finance Team Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Finance login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.success).to.be.true;",
									"    pm.expect(responseJson.data.admin.role).to.eql(\"FINANCE_TEAM\");",
									"    ",
									"    // Save finance token separately",
									"    if (responseJson.data.accessToken) {",
									"        pm.collectionVariables.set(\"finance_token\", responseJson.data.accessToken);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"finance@loyalbridge.io\",\n  \"password\": \"FinancePassword123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Login as Finance Team member (read-only + export access)"
					}
				},
				{
					"name": "Support Staff Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Support login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.success).to.be.true;",
									"    pm.expect(responseJson.data.admin.role).to.eql(\"SUPPORT_STAFF\");",
									"    ",
									"    // Save support token separately",
									"    if (responseJson.data.accessToken) {",
									"        pm.collectionVariables.set(\"support_token\", responseJson.data.accessToken);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"support@loyalbridge.io\",\n  \"password\": \"SupportPassword123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Login as Support Staff (user management access)"
					}
				},
				{
					"name": "Get Current Admin Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get admin info successful\", function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.success).to.be.true;",
									"    pm.expect(responseJson.data).to.have.property(\"email\");",
									"    pm.expect(responseJson.data).to.have.property(\"role\");",
									"    pm.expect(responseJson.data).to.have.property(\"fullName\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/auth/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"me"
							]
						},
						"description": "Get current authenticated admin information"
					}
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Token refresh successful\", function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.success).to.be.true;",
									"    pm.expect(responseJson.data).to.have.property(\"accessToken\");",
									"    ",
									"    // Update access token",
									"    if (responseJson.data.accessToken) {",
									"        pm.collectionVariables.set(\"access_token\", responseJson.data.accessToken);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refreshToken\": \"{{refresh_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/refresh",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"refresh"
							]
						},
						"description": "Refresh access token using refresh token"
					}
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Logout successful\", function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"logout"
							]
						},
						"description": "Logout and blacklist current token"
					}
				}
			],
			"description": "Authentication endpoints for admin login, token management, and logout"
		},
		{
			"name": "üë• User Management",
			"item": [
				{
					"name": "Get User Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get user stats successful\", function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.success).to.be.true;",
									"    pm.expect(responseJson.data).to.have.property(\"totalUsers\");",
									"    pm.expect(responseJson.data).to.have.property(\"activeUsers\");",
									"    pm.expect(responseJson.data).to.have.property(\"totalPointsInSystem\");",
									"});",
									"",
									"pm.test(\"Stats have reasonable values\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data.totalUsers).to.be.at.least(1);",
									"    pm.expect(responseJson.data.activeUsers).to.be.at.most(responseJson.data.totalUsers);",
									"    ",
									"    console.log(\"Total Users:\", responseJson.data.totalUsers);",
									"    console.log(\"Active Users:\", responseJson.data.activeUsers);",
									"    console.log(\"Total Points:\", responseJson.data.totalPointsInSystem);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/stats",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"stats"
							]
						},
						"description": "Get comprehensive user statistics for dashboard"
					}
				},
				{
					"name": "Get All Users (Paginated)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get users successful\", function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.success).to.be.true;",
									"    pm.expect(responseJson.data).to.have.property(\"content\");",
									"    pm.expect(responseJson.data.content).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"Pagination info present\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data).to.have.property(\"totalElements\");",
									"    pm.expect(responseJson.data).to.have.property(\"totalPages\");",
									"    pm.expect(responseJson.data).to.have.property(\"size\");",
									"    ",
									"    console.log(\"Total Elements:\", responseJson.data.totalElements);",
									"    console.log(\"Current Page Size:\", responseJson.data.content.length);",
									"});",
									"",
									"pm.test(\"Users have required fields\", function () {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.data.content.length > 0) {",
									"        const firstUser = responseJson.data.content[0];",
									"        pm.expect(firstUser).to.have.property(\"id\");",
									"        pm.expect(firstUser).to.have.property(\"name\");",
									"        pm.expect(firstUser).to.have.property(\"email\");",
									"        pm.expect(firstUser).to.have.property(\"status\");",
									"        pm.expect(firstUser).to.have.property(\"totalPoints\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users?page=0&size=5&sortBy=createdAt&sortDir=desc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "5"
								},
								{
									"key": "sortBy",
									"value": "createdAt"
								},
								{
									"key": "sortDir",
									"value": "desc"
								}
							]
						},
						"description": "Get paginated list of users with sorting"
					}
				},
				{
					"name": "Search Users by Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Search users successful\", function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.success).to.be.true;",
									"});",
									"",
									"pm.test(\"Search results contain name filter\", function () {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.data.content.length > 0) {",
									"        const users = responseJson.data.content;",
									"        users.forEach(user => {",
									"            pm.expect(user.name.toLowerCase()).to.include(\"john\");",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users?name=John&status=ACTIVE&isVerified=true",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "name",
									"value": "John"
								},
								{
									"key": "status",
									"value": "ACTIVE"
								},
								{
									"key": "isVerified",
									"value": "true"
								}
							]
						},
						"description": "Search users with multiple filters"
					}
				},
				{
					"name": "Get User by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get user by ID successful\", function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.success).to.be.true;",
									"    pm.expect(responseJson.data).to.have.property(\"id\");",
									"    pm.expect(responseJson.data).to.have.property(\"name\");",
									"    pm.expect(responseJson.data).to.have.property(\"email\");",
									"    pm.expect(responseJson.data).to.have.property(\"totalTransactions\");",
									"});",
									"",
									"pm.test(\"User has detailed information\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data).to.have.property(\"lifetimeEarnings\");",
									"    pm.expect(responseJson.data).to.have.property(\"lifetimeRedemptions\");",
									"    pm.expect(responseJson.data).to.have.property(\"lastActivity\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Get detailed user information by ID"
					}
				},
				{
					"name": "Get User Points History",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get points history successful\", function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.success).to.be.true;",
									"    pm.expect(responseJson.data).to.have.property(\"content\");",
									"});",
									"",
									"pm.test(\"Points history has transaction details\", function () {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.data.content.length > 0) {",
									"        const transaction = responseJson.data.content[0];",
									"        pm.expect(transaction).to.have.property(\"type\");",
									"        pm.expect(transaction).to.have.property(\"amount\");",
									"        pm.expect(transaction).to.have.property(\"balanceAfter\");",
									"        pm.expect(transaction).to.have.property(\"createdAt\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/{{user_id}}/points-history?page=0&size=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"points-history"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						},
						"description": "Get user's points transaction history"
					}
				},
				{
					"name": "Update User Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Update user status successful\", function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.success).to.be.true;",
									"    pm.expect(responseJson.data.status).to.eql(\"FROZEN\");",
									"});",
									"",
									"pm.test(\"User status updated in response\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data).to.have.property(\"id\");",
									"    pm.expect(responseJson.data).to.have.property(\"updatedAt\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"FROZEN\",\n  \"reason\": \"Suspicious activity detected during testing\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/{{user_id}}/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"status"
							]
						},
						"description": "Update user account status (requires SUPER_ADMIN or SUPPORT_STAFF)"
					}
				},
				{
					"name": "Update User Risk Flag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Update risk flag successful\", function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.success).to.be.true;",
									"    pm.expect(responseJson.data.isHighRisk).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"isHighRisk\": true,\n  \"reason\": \"Multiple failed login attempts detected\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/{{user_id}}/risk-flag",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"risk-flag"
							]
						},
						"description": "Flag user as high risk"
					}
				},
				{
					"name": "Update User Verification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Update verification successful\", function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.success).to.be.true;",
									"    pm.expect(responseJson.data.isVerified).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"isVerified\": true,\n  \"notes\": \"Documents verified by admin during testing\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/{{user_id}}/verification",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"verification"
							]
						},
						"description": "Verify user account"
					}
				},
				{
					"name": "Reset User Status to Active",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Reset status successful\", function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.success).to.be.true;",
									"    pm.expect(responseJson.data.status).to.eql(\"ACTIVE\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"ACTIVE\",\n  \"reason\": \"Testing completed, restoring normal status\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/{{user_id}}/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"status"
							]
						},
						"description": "Reset user status back to ACTIVE"
					}
				},
				{
					"name": "Export Users CSV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"CSV export successful\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/octet-stream\");",
									"});",
									"",
									"pm.test(\"CSV file has content\", function () {",
									"    pm.expect(pm.response.text().length).to.be.greaterThan(100);",
									"    pm.expect(pm.response.text()).to.include(\"ID,Name,Email\"); // CSV header",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/export?status=ACTIVE&isVerified=true",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"export"
							],
							"query": [
								{
									"key": "status",
									"value": "ACTIVE"
								},
								{
									"key": "isVerified",
									"value": "true"
								}
							]
						},
						"description": "Export filtered users to CSV (requires SUPER_ADMIN or FINANCE_TEAM)"
					}
				}
			],
			"description": "User management endpoints with CRUD operations and advanced filtering"
		},
		{
			"name": "üîí Role-Based Access Testing",
			"item": [
				{
					"name": "Finance: Read Users (Should Work)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Finance team can read users\", function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{finance_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users?page=0&size=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "5"
								}
							]
						},
						"description": "Finance team should have read access to users"
					}
				},
				{
					"name": "Finance: Export CSV (Should Work)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Finance team can export CSV\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/octet-stream\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{finance_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/export",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"export"
							]
						},
						"description": "Finance team should have export access"
					}
				},
				{
					"name": "Finance: Update Status (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Finance team cannot update user status\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{finance_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"FROZEN\",\n  \"reason\": \"Test unauthorized access\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/{{user_id}}/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"status"
							]
						},
						"description": "Finance team should NOT have update access"
					}
				},
				{
					"name": "Support: Update Status (Should Work)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Support staff can update user status\", function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{support_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"ACTIVE\",\n  \"reason\": \"Support staff test update\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/{{user_id}}/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"status"
							]
						},
						"description": "Support staff should have update access"
					}
				}
			],
			"description": "Test role-based access control for different admin types"
		},
		{
			"name": "‚ùå Error Testing",
			"item": [
				{
					"name": "Invalid Login Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid login rejected\", function () {",
									"    pm.response.to.have.status(400);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.success).to.be.false;",
									"    pm.expect(responseJson.error).to.include(\"Login failed\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"invalid@loyalbridge.io\",\n  \"password\": \"wrongpassword\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Test login with invalid credentials"
					}
				},
				{
					"name": "Unauthorized Access (No Token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unauthorized access rejected\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Test access without authentication token"
					}
				},
				{
					"name": "Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid token rejected\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer invalid_token_123"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Test access with invalid token"
					}
				},
				{
					"name": "Non-existent User ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Non-existent user returns error\", function () {",
									"    pm.response.to.have.status(400);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.success).to.be.false;",
									"    pm.expect(responseJson.error).to.include(\"User not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/99999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"99999"
							]
						},
						"description": "Test access to non-existent user"
					}
				},
				{
					"name": "Invalid Status Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid status rejected\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"INVALID_STATUS\",\n  \"reason\": \"Testing invalid status\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/{{user_id}}/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}",
								"status"
							]
						},
						"description": "Test update with invalid status value"
					}
				}
			],
			"description": "Test error handling and validation"
		},
		{
			"name": "üè• Health Checks",
			"item": [
				{
					"name": "Application Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Application is healthy\", function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.status).to.eql(\"UP\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/actuator/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"actuator",
								"health"
							]
						},
						"description": "Check application health status"
					}
				},
				{
					"name": "Auth Service Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Auth service is healthy\", function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.success).to.be.true;",
									"    pm.expect(responseJson.data).to.eql(\"OK\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/auth/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"health"
							]
						},
						"description": "Check authentication service health"
					}
				},
				{
					"name": "Swagger Documentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Swagger UI accessible\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.text()).to.include(\"swagger\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/swagger-ui.html",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"swagger-ui.html"
							]
						},
						"description": "Check if Swagger documentation is accessible"
					}
				}
			],
			"description": "Health checks and system status endpoints"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"console.log('Request to:', pm.request.url.toString());",
					"",
					"// Check if we have an access token for authenticated requests",
					"if (pm.request.url.toString().includes('/api/') && !pm.request.url.toString().includes('/auth/')) {",
					"    const token = pm.collectionVariables.get('access_token');",
					"    if (!token) {",
					"        console.warn('No access token found. You may need to login first.');",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"pm.test('Response time is acceptable', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"pm.test('Response has correct content type', function () {",
					"    if (pm.response.headers.get('Content-Type')) {",
					"        pm.expect(pm.response.headers.get('Content-Type')).to.satisfy(function(contentType) {",
					"            return contentType.includes('application/json') || ",
					"                   contentType.includes('application/octet-stream') ||",
					"                   contentType.includes('text/html');",
					"        });",
					"    }",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "refresh_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "finance_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "support_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "1",
			"type": "string"
		}
	]
}